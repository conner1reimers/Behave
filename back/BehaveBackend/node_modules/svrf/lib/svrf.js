'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var axios = _interopDefault(require('axios'));

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var classCallCheck = _classCallCheck;

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

var createClass = _createClass;

function createCommonjsModule(fn, module) {
	return module = { exports: {} }, fn(module, module.exports), module.exports;
}

var runtime = createCommonjsModule(function (module) {
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

!(function(global) {

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined$1; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = module.exports;

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration.
          result.value = unwrapped;
          resolve(result);
        }, function(error) {
          // If a rejected Promise was yielded, throw the rejection back
          // into the async generator function so it can be handled there.
          return invoke("throw", error, resolve, reject);
        });
      }
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
    return this;
  };
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      context.method = method;
      context.arg = arg;

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          var delegateResult = maybeInvokeDelegate(delegate, context);
          if (delegateResult) {
            if (delegateResult === ContinueSentinel) continue;
            return delegateResult;
          }
        }

        if (context.method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = context.arg;

        } else if (context.method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw context.arg;
          }

          context.dispatchException(context.arg);

        } else if (context.method === "return") {
          context.abrupt("return", context.arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          if (record.arg === ContinueSentinel) {
            continue;
          }

          return {
            value: record.arg,
            done: context.done
          };

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(context.arg) call above.
          context.method = "throw";
          context.arg = record.arg;
        }
      }
    };
  }

  // Call delegate.iterator[context.method](context.arg) and handle the
  // result, either by returning a { value, done } result from the
  // delegate iterator, or by modifying context.method and context.arg,
  // setting context.delegate to null, and returning the ContinueSentinel.
  function maybeInvokeDelegate(delegate, context) {
    var method = delegate.iterator[context.method];
    if (method === undefined$1) {
      // A .throw or .return when the delegate iterator has no .throw
      // method always terminates the yield* loop.
      context.delegate = null;

      if (context.method === "throw") {
        if (delegate.iterator.return) {
          // If the delegate iterator has a return method, give it a
          // chance to clean up.
          context.method = "return";
          context.arg = undefined$1;
          maybeInvokeDelegate(delegate, context);

          if (context.method === "throw") {
            // If maybeInvokeDelegate(context) changed context.method from
            // "return" to "throw", let that override the TypeError below.
            return ContinueSentinel;
          }
        }

        context.method = "throw";
        context.arg = new TypeError(
          "The iterator does not provide a 'throw' method");
      }

      return ContinueSentinel;
    }

    var record = tryCatch(method, delegate.iterator, context.arg);

    if (record.type === "throw") {
      context.method = "throw";
      context.arg = record.arg;
      context.delegate = null;
      return ContinueSentinel;
    }

    var info = record.arg;

    if (! info) {
      context.method = "throw";
      context.arg = new TypeError("iterator result is not an object");
      context.delegate = null;
      return ContinueSentinel;
    }

    if (info.done) {
      // Assign the result of the finished delegate to the temporary
      // variable specified by delegate.resultName (see delegateYield).
      context[delegate.resultName] = info.value;

      // Resume execution at the desired location (see delegateYield).
      context.next = delegate.nextLoc;

      // If context.method was "throw" but the delegate handled the
      // exception, let the outer generator proceed normally. If
      // context.method was "next", forget context.arg since it has been
      // "consumed" by the delegate iterator. If context.method was
      // "return", allow the original .return call to continue in the
      // outer generator.
      if (context.method !== "return") {
        context.method = "next";
        context.arg = undefined$1;
      }

    } else {
      // Re-yield the result returned by the delegate method.
      return info;
    }

    // The delegate iterator is finished, so forget it and continue with
    // the outer generator.
    context.delegate = null;
    return ContinueSentinel;
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  // A Generator should always return itself as the iterator object when the
  // @@iterator function is called on it. Some browsers' implementations of the
  // iterator prototype chain incorrectly implement this, causing the Generator
  // object to not be returned from this call. This ensures that doesn't happen.
  // See https://github.com/facebook/regenerator/issues/274 for more details.
  Gp[iteratorSymbol] = function() {
    return this;
  };

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined$1;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined$1, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined$1;
      this.done = false;
      this.delegate = null;

      this.method = "next";
      this.arg = undefined$1;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined$1;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;

        if (caught) {
          // If the dispatched exception was caught by a catch block,
          // then let that catch block handle the exception normally.
          context.method = "next";
          context.arg = undefined$1;
        }

        return !! caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.method = "next";
        this.next = finallyEntry.finallyLoc;
        return ContinueSentinel;
      }

      return this.complete(record);
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = this.arg = record.arg;
        this.method = "return";
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }

      return ContinueSentinel;
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      if (this.method === "next") {
        // Deliberately forget the last sent value so that we don't
        // accidentally pass it on to the delegate.
        this.arg = undefined$1;
      }

      return ContinueSentinel;
    }
  };
})(
  // In sloppy mode, unbound `this` refers to the global object, fallback to
  // Function constructor if we're in global strict mode. That is sadly a form
  // of indirect eval which violates Content Security Policy.
  (function() {
    return this || (typeof self === "object" && self);
  })() || Function("return this")()
);
});

/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

// This method of obtaining a reference to the global object needs to be
// kept identical to the way it is obtained in runtime.js
var g = (function() {
  return this || (typeof self === "object" && self);
})() || Function("return this")();

// Use `getOwnPropertyNames` because not all browsers support calling
// `hasOwnProperty` on the global `self` object in a worker. See #183.
var hadRuntime = g.regeneratorRuntime &&
  Object.getOwnPropertyNames(g).indexOf("regeneratorRuntime") >= 0;

// Save the old regeneratorRuntime in case it needs to be restored later.
var oldRuntime = hadRuntime && g.regeneratorRuntime;

// Force reevalutation of runtime.js.
g.regeneratorRuntime = undefined;

var runtimeModule = runtime;

if (hadRuntime) {
  // Restore the original runtime.
  g.regeneratorRuntime = oldRuntime;
} else {
  // Remove the global property added by runtime.js.
  try {
    delete g.regeneratorRuntime;
  } catch(e) {
    g.regeneratorRuntime = undefined;
  }
}

var regenerator = runtimeModule;

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
  try {
    var info = gen[key](arg);
    var value = info.value;
  } catch (error) {
    reject(error);
    return;
  }

  if (info.done) {
    resolve(value);
  } else {
    Promise.resolve(value).then(_next, _throw);
  }
}

function _asyncToGenerator(fn) {
  return function () {
    var self = this,
        args = arguments;
    return new Promise(function (resolve, reject) {
      var gen = fn.apply(self, args);

      function _next(value) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
      }

      function _throw(err) {
        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
      }

      _next(undefined);
    });
  };
}

var asyncToGenerator = _asyncToGenerator;

/**
 * Authentication API provider
*/
var AuthApi =
/*#__PURE__*/
function () {
  function AuthApi(httpClient, tokenService, apiKey) {
    classCallCheck(this, AuthApi);

    this.httpClient = httpClient;
    this.tokenService = tokenService;
    this.apiKey = apiKey;
  }
  /**
   * Authenticates your app: retrieves token and saves it or takes it from the storage.
   * @returns {Promise<void>}
   */


  createClass(AuthApi, [{
    key: "authenticate",
    value: function () {
      var _authenticate = asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee() {
        var response;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!this.tokenService.isTokenValid()) {
                  _context.next = 2;
                  break;
                }

                return _context.abrupt("return");

              case 2:
                if (this.apiKey) {
                  _context.next = 4;
                  break;
                }

                throw new Error('Api Key should be provided for authentication');

              case 4:
                // Preventing multiple requests.
                if (!this.authPromise) {
                  this.authPromise = this.httpClient.post('/app/authenticate', {
                    apiKey: this.apiKey
                  });
                }

                _context.next = 7;
                return this.authPromise;

              case 7:
                response = _context.sent;
                this.tokenService.setAppTokenInfo({
                  appToken: response.token,
                  expiresIn: response.expiresIn
                });
                delete this.authPromise;

              case 10:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function authenticate() {
        return _authenticate.apply(this, arguments);
      }

      return authenticate;
    }()
  }]);

  return AuthApi;
}();

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

var defineProperty = _defineProperty;

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      defineProperty(target, key, source[key]);
    });
  }

  return target;
}

var objectSpread = _objectSpread;

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }

    return arr2;
  }
}

var arrayWithoutHoles = _arrayWithoutHoles;

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

var iterableToArray = _iterableToArray;

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var nonIterableSpread = _nonIterableSpread;

function _toConsumableArray(arr) {
  return arrayWithoutHoles(arr) || iterableToArray(arr) || nonIterableSpread();
}

var toConsumableArray = _toConsumableArray;

/**
 * Enum for category
 * @enum {string}
 */
var Category = {
  FACE_FILTERS: 'Face Filters'
};

/**
 * Enum for media types
 * @enum {string}
 */
var MediaType = {
  PHOTO: 'photo',
  VIDEO: 'video',
  MODEL_3D: '3d'
};

/**
 * Enum for stereoscopic types
 * @enum {string}
 */
var StereoscopicType = {
  NONE: 'none',
  TOP_BOTTOM: 'top-bottom',
  LEFT_RIGHT: 'left-right'
};

/**
 * @typedef {Object} Enums
 * @prop {Category} category
 * @prop {MediaType} mediaType
 * @prop {StereoscopicType} stereoscopicType
 */

/**
 * @type {Enums}
 * @private
 */

var enums = {
  category: Category,
  mediaType: MediaType,
  stereoscopicType: StereoscopicType
};

var _typeof_1 = createCommonjsModule(function (module) {
function _typeof2(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof2 = function _typeof2(obj) { return typeof obj; }; } else { _typeof2 = function _typeof2(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof2(obj); }

function _typeof(obj) {
  if (typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol") {
    module.exports = _typeof = function _typeof(obj) {
      return _typeof2(obj);
    };
  } else {
    module.exports = _typeof = function _typeof(obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : _typeof2(obj);
    };
  }

  return _typeof(obj);
}

module.exports = _typeof;
});

/**
 * Useful number functions that are missing in IE11.
 */
var NumberService =
/*#__PURE__*/
function () {
  function NumberService() {
    classCallCheck(this, NumberService);
  }

  createClass(NumberService, null, [{
    key: "isInteger",

    /**
     * Checks if value is an integer
     * @param {number} value
     * @returns {boolean} If value is an integer
     */
    value: function isInteger(value) {
      return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;
    }
  }]);

  return NumberService;
}();

/**
 * Useful array functions that are missing in IE11.
 * NOTE: These are not 100% polyfills. Their behavior may be different in some edge cases,
 * but this is enough for the current library to not overcomplicate the bundle.
 */
var ArrayService =
/*#__PURE__*/
function () {
  function ArrayService() {
    classCallCheck(this, ArrayService);
  }

  createClass(ArrayService, null, [{
    key: "includes",

    /**
     * Checks if array includes a value.
     * @param {Array} array
     * @param {any} valueToFind
     * @returns {boolean} If the array contains particular value.
     */
    value: function includes(array, valueToFind) {
      if (!Array.isArray(array)) {
        throw new TypeError('Passed value is not an array');
      }

      return array.some(function (v) {
        return v === valueToFind;
      });
    }
    /**
     * @callback findPredicate
     * @param {any} arrayElement
     * @param {number} index
     * @param {Array} sourceArray
     */

    /**
     * Finds an element in an array.
     * @param {Array} array
     * @param {findPredicate} predicate
     * @returns {any} Found element or null if nothing found.
     */

  }, {
    key: "find",
    value: function find(array, predicate) {
      if (!Array.isArray(array)) {
        throw new TypeError('Passed value is not an array');
      }

      if (typeof predicate !== 'function') {
        throw new TypeError('Callback must be a function');
      }

      for (var i = 0; i < array.length; i += 1) {
        if (predicate(array[i], i, array)) {
          return array[i];
        }
      }

      return null;
    }
  }]);

  return ArrayService;
}();

/**
 * Service for validating values
*/

var Validator =
/*#__PURE__*/
function () {
  function Validator() {
    classCallCheck(this, Validator);
  }

  createClass(Validator, null, [{
    key: "validateNumber",

    /**
     * Validate integer number
     * @param {string} name - Name of validating value
     * @param {number} value - Checked value
     * @param {{min: number=, max: number=}=} range - Specify valid range for number
     * @throws {TypeError} Provided value should be an integer
     * @throws {RangeError} Provided value should be equal or more than min in range
     * @throws {RangeError} Provided value should be equal or less than max in range
     */
    value: function validateNumber(name, value) {
      var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          min = _ref.min,
          max = _ref.max;

      if (value === undefined) return;

      if (!NumberService.isInteger(value)) {
        throw new TypeError("".concat(name, " should be an integer"));
      }

      if (min !== undefined && value < min) {
        throw new RangeError("".concat(name, " should be equal or more than ").concat(min));
      }

      if (max !== undefined && value > max) {
        throw new RangeError("".concat(name, " should be equal or less than ").concat(max));
      }
    }
    /**
     * Validate string which must be in enum
     * @param {string} name - Name of validating value
     * @param {string} value - Checked value
     * @param {Object.<string, string>} enumObject - Checked enum
     * @throws {TypeError} Provided value should be a string
     * @throws {TypeError} Provided value should be one of enum
     */

  }, {
    key: "validateEnumString",
    value: function validateEnumString(name, value) {
      var enumObject = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
      if (value === undefined) return;

      if (!Validator.isString(value)) {
        throw new TypeError("".concat(name, " should be a string"));
      }

      var enumKeys = Object.keys(enumObject);
      var enumValues = enumKeys.map(function (enumKey) {
        return enumObject[enumKey];
      });

      if (!ArrayService.includes(enumValues, value)) {
        throw new TypeError("".concat(name, " should be one of the following values: ").concat(enumValues.join(',')));
      }
    }
    /**
     * Validate string or array of strings which must be in enum
     * @param {string} name - Name of validating value
     * @param {string|Array<string>} value - Checked value
     * @param {Object.<string, string>} enumObject - Checked enum
     * @throws {TypeError} Provided value should be either an array or a string
     */

  }, {
    key: "validateArrayOrSingleEnumString",
    value: function validateArrayOrSingleEnumString(name, value, enumObject) {
      if (value === undefined) return;

      if (Validator.isString(value)) {
        Validator.validateEnumString(name, value, enumObject);
        return;
      }

      if (!Array.isArray(value)) {
        throw new TypeError("".concat(name, " should be either an array or a string"));
      }

      value.forEach(function (element, index) {
        return Validator.validateEnumString("".concat(name, "[").concat(index, "]"), element, enumObject);
      });
    }
    /**
     * Validate object schema
     * @param {string} name - Name of validating value
     * @param {Object} value - Checked value
     * @param {Object} options - Object keys restrictions
     * @param {Array<string>} options.allowedKeys - List of allowed keys in object
     * @param {Array<string>} options.requiredKeys - List of required keys in object
     * @throws {TypeError} Provided value should be an object
     */

  }, {
    key: "validateObjectSchema",
    value: function validateObjectSchema(name, value, _ref2) {
      var allowedKeys = _ref2.allowedKeys,
          requiredKeys = _ref2.requiredKeys;

      if (_typeof_1(value) !== 'object') {
        throw new TypeError("".concat(name, " should be an object"));
      }

      var keys = Object.keys(value);

      if (allowedKeys) {
        Validator.validateAllowedKeys(name, keys, allowedKeys);
      }

      if (requiredKeys) {
        Validator.validateRequiredKeys(name, keys, requiredKeys);
      }
    }
    /**
     * Validate object schema
     * @param {string} name - Name of validating value
     * @param {Object} value - Checked value
     * @param {Array<string>} allowedKeys - List of allowed keys in object
     * @throws {TypeError} Some key is not allowed in the object schema
     */

  }, {
    key: "validateAllowedKeys",
    value: function validateAllowedKeys(name, keys, allowedKeys) {
      var forbiddenKey = ArrayService.find(keys, function (k) {
        return !ArrayService.includes(allowedKeys, k);
      });

      if (forbiddenKey) {
        throw new TypeError("".concat(forbiddenKey, " is not allowed in the ").concat(name, " schema"));
      }
    }
    /**
     * Validate object schema
     * @param {string} name - Name of validating value
     * @param {Object} value - Checked value
     * @param {Array<string>} requiredKeys - List of required keys in object
     * @throws {TypeError} Some key is required in the object schema
     */

  }, {
    key: "validateRequiredKeys",
    value: function validateRequiredKeys(name, keys, requiredKeys) {
      var missingKey = ArrayService.find(requiredKeys, function (k) {
        return !ArrayService.includes(keys, k);
      });

      if (missingKey) {
        throw new TypeError("".concat(missingKey, " is required in the ").concat(name, " schema"));
      }
    }
    /**
     * Check is value string or not
     * @param {any} value - Checked value
     * @returns {boolean} Is value string or not
     */

  }, {
    key: "isString",
    value: function isString(value) {
      return Object.prototype.toString.call(value) === '[object String]';
    }
  }]);

  return Validator;
}();

/**
 * HTTP request query handlers provider
*/

var QueryService =
/*#__PURE__*/
function () {
  function QueryService() {
    classCallCheck(this, QueryService);
  }

  createClass(QueryService, null, [{
    key: "validateParams",

    /**
     * Validate query params using object schema
     * @param {Object} params - Params needed to validate
     * @throws {Error} Params are invalid
     */
    value: function validateParams(params) {
      if (!params) {
        return;
      }

      Validator.validateObjectSchema('Query Params', params, {
        allowedKeys: QueryService.allowedParams
      });
      Validator.validateEnumString('category', params.category, enums.category);
      Validator.validateNumber('minimumWidth', params.minimumWidth);
      Validator.validateNumber('pageNum', params.pageNum, {
        min: 0
      });
      Validator.validateNumber('size', params.size, {
        min: 1,
        max: 100
      });
      Validator.validateEnumString('stereoscopic type', params.stereoscopicType, enums.stereoscopicType);
      Validator.validateArrayOrSingleEnumString('type', params.type, enums.mediaType);
    }
    /**
     * Prepare query params for HTTP request
     * @param {Object=} params - Request params
     * @param {string=} params.category - Media category
     * @param {number=} params.minimumWidth - Media minimum width
     * @param {number=} params.pageNum - Page number
     * @param {number=} params.size - Page size
     * @param {string=} params.stereoscopicType - Media stereoscopic type
     * @param {(string|Array<string>)=} params.type - Media type
     * @returns {Object} Params which are ready for HTTP request
     */

  }, {
    key: "prepareQueryParams",
    value: function prepareQueryParams(params) {
      var preparedParams = objectSpread({}, params);

      if (params && Array.isArray(params.type)) {
        preparedParams.type = params.type.join(',');
      }

      QueryService.booleanParams.forEach(function (key) {
        if (preparedParams[key] !== undefined) {
          preparedParams[key] = !!preparedParams[key];
        }
      });
      return preparedParams;
    }
  }]);

  return QueryService;
}();

defineProperty(QueryService, "booleanParams", ['isFaceFilter', 'hasBlendShapes', 'requiresBlendShapes']);

defineProperty(QueryService, "allowedParams", [].concat(toConsumableArray(QueryService.booleanParams), ['category', 'minimumWidth', 'pageNum', 'size', 'stereoscopicType', 'type']).sort());

/**
 * @typedef {Object} HttpRequestParams
 * @prop {string=} category - Media category
 * @prop {boolean=} hasBlendShapes
 * @prop {boolean=} isFaceFilter
 * @prop {number=} minimumWidth - Media minimum width
 * @prop {number=} pageNum - Page number
 * @prop {boolean=} requiresBlendShapes
 * @prop {number=} size - Page size
 * @prop {string=} stereoscopicType - Media stereoscopic type
 * @prop {(string|Array<string>)=} type - Media type
 */

/**
 * @typedef {Object} Media
 * @prop {string} id
 * @prop {string} src - Source file URL with original quality
 * @prop {string} title
 * @prop {string} description
 * @prop {Array<string>} authors
 * @prop {string} site - Source site name where the media came from
 * @prop {string} canonical - Canonical URL for the Svrf site
 * @prop {string} embedUrl - Embed player URL
 * @prop {string} embedHtml - Ready-to-paste HTML code with embed player
 * @prop {string} type
 * @prop {boolean} adult - Is media only for adults
 * @prop {number|null} width - Width in pixels
 * @prop {number|null} height - Height in pixels
 * @prop {number|null} duration - Duration in seconds
 * @prop {MediaMetadata} metadata
 * @prop {MediaFiles} files
 */

/**
 * @typedef {Object} MediaFiles
 * @prop {Object} images
 * @prop {Object} videos
 * @prop {Object} stereo
 */

/**
 * @typedef {Object} MediaMetadata
 * @prop {boolean=} isFaceFilter
 * @prop {boolean=} hasBlendShapes
 * @prop {boolean=} requiresBlendShapes
 */

/**
 * @typedef {Object} SingleMediaApiResponse
 * @prop {boolean} success
 * @prop {Media} media
 */

/**
 * @typedef {Object} MultipleMediaApiResponse
 * @prop {boolean} success
 * @prop {Array<Media>} media
 * @prop {string} nextPageCursor
 * @prop {number} nextPageNum
 * @prop {number} pageNum
 */

/**
 * @typedef {Object} SearchMediaApiResponse
 * @prop {boolean} success
 * @prop {Array<Media>} media
 * @prop {string} nextPageCursor
 * @prop {number} nextPageNum
 * @prop {number} pageNum
 * @prop {number} tookMs
 * @prop {number} totalNum
 */

/**
 * Media API provider
*/

var MediaApi =
/*#__PURE__*/
function () {
  function MediaApi(httpClient) {
    classCallCheck(this, MediaApi);

    /** @private */
    this.httpClient = httpClient;
  }
  /**
   * Get media by ID
   * @param {number|string} id - ID of media
   * @returns {Promise<SingleMediaApiResponse>} Found media by provided ID
   * @throws {Error} Media Id should be provided
   */


  createClass(MediaApi, [{
    key: "getById",
    value: function () {
      var _getById = asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee(id) {
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (id) {
                  _context.next = 2;
                  break;
                }

                throw new Error('Media Id should be provided');

              case 2:
                return _context.abrupt("return", this.httpClient.get("/vr/".concat(id)));

              case 3:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function getById(_x) {
        return _getById.apply(this, arguments);
      }

      return getById;
    }()
    /**
     * Get trending media
     * @param {HttpRequestParams=} params - Request params
     * @returns {Promise<MultipleMediaApiResponse>} Found trending media
     */

  }, {
    key: "getTrending",
    value: function () {
      var _getTrending = asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee2(params) {
        var preparedParams;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                QueryService.validateParams(params);
                preparedParams = QueryService.prepareQueryParams(params);
                return _context2.abrupt("return", this.httpClient.get('/vr/trending', preparedParams));

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function getTrending(_x2) {
        return _getTrending.apply(this, arguments);
      }

      return getTrending;
    }()
    /**
     * Get media by query
     * @param {string} query - Query for searching media
     * @param {HttpRequestParams=} params - Request params
     * @returns {Promise<SearchMediaApiResponse>} - Found media by query
     * @throws {Error} query should be provided
     */

  }, {
    key: "search",
    value: function () {
      var _search = asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee3(query, params) {
        var preparedParams;
        return regenerator.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (query) {
                  _context3.next = 2;
                  break;
                }

                throw new Error('query should be provided');

              case 2:
                QueryService.validateParams(params);
                preparedParams = QueryService.prepareQueryParams(params);
                return _context3.abrupt("return", this.httpClient.get('/vr/search', objectSpread({
                  q: query
                }, preparedParams)));

              case 5:
              case "end":
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function search(_x3, _x4) {
        return _search.apply(this, arguments);
      }

      return search;
    }()
  }]);

  return MediaApi;
}();

function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

var assertThisInitialized = _assertThisInitialized;

function _possibleConstructorReturn(self, call) {
  if (call && (_typeof_1(call) === "object" || typeof call === "function")) {
    return call;
  }

  return assertThisInitialized(self);
}

var possibleConstructorReturn = _possibleConstructorReturn;

var getPrototypeOf = createCommonjsModule(function (module) {
function _getPrototypeOf(o) {
  module.exports = _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

module.exports = _getPrototypeOf;
});

var setPrototypeOf = createCommonjsModule(function (module) {
function _setPrototypeOf(o, p) {
  module.exports = _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

module.exports = _setPrototypeOf;
});

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  if (superClass) setPrototypeOf(subClass, superClass);
}

var inherits = _inherits;

/** @constant {string} Base API URL */
var BASE_URL = 'https://api.svrf.com/v1';

/**
 * HTTP client
*/

var HttpClient =
/*#__PURE__*/
function () {
  /**
   * Create HTTP client
   */
  function HttpClient() {
    classCallCheck(this, HttpClient);

    /** @private */
    this.api = axios.create();
    this.api.defaults.baseURL = BASE_URL;
  }
  /**
   * Make GET request
   * @param {string} url - Request URL
   * @param {Object} params - Query params
   * @returns {Promise<any>} HTTP response data
   */


  createClass(HttpClient, [{
    key: "get",
    value: function () {
      var _get = asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee(url, params) {
        var response;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return this.api.get(url, {
                  params: params
                });

              case 2:
                response = _context.sent;
                return _context.abrupt("return", response.data);

              case 4:
              case "end":
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function get(_x, _x2) {
        return _get.apply(this, arguments);
      }

      return get;
    }()
    /**
     * Make POST request
     * @param {string} url - Request URL
     * @param {Object} body - Request body
     * @returns {Promise<any>} HTTP response data
     */

  }, {
    key: "post",
    value: function () {
      var _post = asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee2(url, body) {
        var response;
        return regenerator.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return this.api.post(url, body);

              case 2:
                response = _context2.sent;
                return _context2.abrupt("return", response.data);

              case 4:
              case "end":
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function post(_x3, _x4) {
        return _post.apply(this, arguments);
      }

      return post;
    }()
  }]);

  return HttpClient;
}();

/**
 * HTTP client which sets x-app-token header in requests
 * @extends HttpClient
*/

var AppTokenHttpClient =
/*#__PURE__*/
function (_HttpClient) {
  inherits(AppTokenHttpClient, _HttpClient);

  /**
   * @param {AuthApi} authApi - Authentication API
   * @param {TokenService} tokenService - Service which provides methods for token storage
   */
  function AppTokenHttpClient(authApi, tokenService) {
    var _this;

    classCallCheck(this, AppTokenHttpClient);

    _this = possibleConstructorReturn(this, getPrototypeOf(AppTokenHttpClient).call(this));

    _this.api.interceptors.request.use(
    /*#__PURE__*/
    function () {
      var _ref = asyncToGenerator(
      /*#__PURE__*/
      regenerator.mark(function _callee(request) {
        var appToken;
        return regenerator.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                _context.next = 2;
                return authApi.authenticate();

              case 2:
                appToken = tokenService.getAppToken();
                request.headers['x-app-token'] = appToken;
                return _context.abrupt("return", request);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, _callee);
      }));

      return function (_x) {
        return _ref.apply(this, arguments);
      };
    }());

    return _this;
  }

  return AppTokenHttpClient;
}(HttpClient);

/**
 * Service for token storage
*/
var TokenService =
/*#__PURE__*/
function () {
  /**
   * @param {Storage} storage - Token storage
   */
  function TokenService(storage) {
    classCallCheck(this, TokenService);

    /** @private */
    this.storage = storage;
  }
  /**
   * Check is token in storage valid or not
   * @returns {boolean} Is token valid or not
   */


  createClass(TokenService, [{
    key: "isTokenValid",
    value: function isTokenValid() {
      var _this$getInfoFromStor = this.getInfoFromStorage(),
          appToken = _this$getInfoFromStor.appToken,
          expirationTime = _this$getInfoFromStor.expirationTime;

      var isTokenValid = appToken && expirationTime && expirationTime > Date.now();
      return !!isTokenValid;
    }
    /**
     * Get app token from storage
     * @returns {string} App token
     */

  }, {
    key: "getAppToken",
    value: function getAppToken() {
      var _this$getInfoFromStor2 = this.getInfoFromStorage(),
          appToken = _this$getInfoFromStor2.appToken;

      return appToken;
    }
    /**
     * Set app token info to storage
     * @param {{appToken: string, expiresIn: number}} appTokenInfo - App token info
     */

  }, {
    key: "setAppTokenInfo",
    value: function setAppTokenInfo(_ref) {
      var appToken = _ref.appToken,
          expiresIn = _ref.expiresIn;
      var expirationTime = Date.now() + expiresIn;
      this.storage.set({
        appToken: appToken,
        expirationTime: expirationTime
      });
    }
    /**
     * Clear app token info in storage
     */

  }, {
    key: "clearAppTokenInfo",
    value: function clearAppTokenInfo() {
      this.storage.clear();
    }
    /**
     * Get app token info from storage
     * @returns {{appToken: string, expirationTime: number}} App token info
     */

  }, {
    key: "getInfoFromStorage",
    value: function getInfoFromStorage() {
      return this.storage.get() || {};
    }
  }]);

  return TokenService;
}();

/**
 * App token info storage which uses localStorage
*/
var LocalStorage =
/*#__PURE__*/
function () {
  function LocalStorage() {
    classCallCheck(this, LocalStorage);
  }

  createClass(LocalStorage, null, [{
    key: "get",

    /**
     * Gets app token info from the localStorage
     * @returns {Object} App token info
     */
    value: function get() {
      var rawValue = localStorage.getItem(LocalStorage.LOCAL_STORAGE_KEY);
      return JSON.parse(rawValue);
    }
    /**
     * Sets app token info into the localStorage
     * @param {Object} value - App token info
     */

  }, {
    key: "set",
    value: function set(value) {
      var rawValue = JSON.stringify(value);
      localStorage.setItem(LocalStorage.LOCAL_STORAGE_KEY, rawValue);
    }
    /**
     * Remove app token info from the localStorage
     */

  }, {
    key: "clear",
    value: function clear() {
      localStorage.removeItem(LocalStorage.LOCAL_STORAGE_KEY);
    }
  }]);

  return LocalStorage;
}();

defineProperty(LocalStorage, "LOCAL_STORAGE_KEY", 'svrf-app-token');

/**
 * App token info storage which uses memory
*/
var MemoryStorage =
/*#__PURE__*/
function () {
  function MemoryStorage() {
    classCallCheck(this, MemoryStorage);
  }

  createClass(MemoryStorage, null, [{
    key: "get",

    /** @private */

    /**
     * Get app token info from variable
     * @returns {Object} App token info
     */
    value: function get() {
      return MemoryStorage.appTokenInfo;
    }
    /**
     * Set app token info in variable
     * @param {Object} value - App token info
     */

  }, {
    key: "set",
    value: function set(value) {
      MemoryStorage.appTokenInfo = value;
    }
    /**
     * Remove app token info from variable
     */

  }, {
    key: "clear",
    value: function clear() {
      MemoryStorage.appTokenInfo = null;
    }
  }]);

  return MemoryStorage;
}();

defineProperty(MemoryStorage, "appTokenInfo", null);

/** @constant {Storage} App token info storage */

var storage = typeof localStorage === 'undefined' ? MemoryStorage : LocalStorage;

/**
 * @typedef {Object} ApiOptions
 * @prop {boolean} isManualAuthentication - pass this option if you want to call api.authenticate
 * manually (for example while user IDLE).
 * @prop {Storage} storage - app token storage
 */

/**
 * @typedef {Object} Storage
 * @prop {Function} get - get app token info from storage
 * @prop {Function} set - set app token info to storage
 * @prop {Function} clear - remove app token info from storage
 */

/**
 * Svrf API provider
*/

var Svrf =
/*#__PURE__*/
function () {
  /**
   * @param {String} apiKey - API Key
   * @param {ApiOptions=} options - API options
   */
  function Svrf(apiKey) {
    var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
        isManualAuthentication = _ref.isManualAuthentication,
        userStorage = _ref.storage;

    classCallCheck(this, Svrf);

    if (userStorage) {
      var storageKeys = ['get', 'set', 'clear'];
      Validator.validateObjectSchema('User Storage', userStorage, {
        allowedKeys: storageKeys,
        requiredKeys: storageKeys
      });
    }

    var tokenStorage = userStorage || storage;
    var tokenService = new TokenService(tokenStorage);
    var httpClient = new HttpClient();
    this.auth = new AuthApi(httpClient, tokenService, apiKey);
    var appTokenHttpClient = new AppTokenHttpClient(this.auth, tokenService);
    /**
     * MediaApi instance
     * @type {MediaApi}
     */

    this.media = new MediaApi(appTokenHttpClient);

    if (!isManualAuthentication) {
      this.authenticate();
    }
  }
  /**
   * Authenticates your app: retrieves token and saves it or takes it from the storage.
   * You should call it only if you passed the isManualAuthentication option.
   * @returns {Promise<void>}
   */


  createClass(Svrf, [{
    key: "authenticate",
    value: function authenticate() {
      return this.auth.authenticate();
    }
  }]);

  return Svrf;
}();
/**
 * @type {Enums}
 * @static
 */


Svrf.enums = enums;

module.exports = Svrf;
